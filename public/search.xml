<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[时钟特效]]></title>
    <url>%2F2019%2F2019-01-05-%E6%97%B6%E9%92%9F%E7%89%B9%E6%95%881.html</url>
    <content type="text"><![CDATA[一个会跳舞的时钟一个黑色背景+红色字体参考资料源码下载地址：百度网盘 提取码：5c41]]></content>
      <categories>
        <category>markdown</category>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitGui功能界面与翻译]]></title>
    <url>%2F2019%2F2019-01-05-GitGui%E5%8A%9F%E8%83%BD%E7%BF%BB%E8%AF%91.html</url>
    <content type="text"><![CDATA[简介Git Gui Here 功能界面与翻译[TOC]标记数字**1-12**一、**Repository 仓库**Explore Working Copy //探索工作副本Git Bash //打开git bash hereBrowse hexo’s Files //浏览hexo的文件Browse Branch Files //浏览分支文件…Visualize hexo’s History //可视化hexo的历史Visualize All Branch History //可视化所有分支历史。Database Statistics //数据库统计Compress Database //压缩数据库Verify Database //验证数据库Create Desktop Icon //创建桌面图标Quit //退出二、**Edit 编辑**Undo //撤消Redo //重新Cut //削减Copy //教授Paste //粘贴Delete //删除Select All //全部选择Option //选项三、**Branch 分支**Create //创建Checkout //结账Rename //重命名Delete //删除Reset //重置。四、**Commit 提交**New Commit //新提交Amend Last Commit //修改最后一次提交Rescan //重新扫描Stage To Commit //阶段提交Stage Changed Files To Commit //阶段更改文件提交Unstage From Commit ///提交中取消暂存Revert Changes ///恢复的变化Show Less Context ///显示更少的背景下Show More Context ///显示更多的上下文Sign Off ///签字Commit //提交五、**Merge 合并**Local Mergeor //本地合并Abort Mergeor //中止合并六、**Remote 远程**Add //添加Push //推送Delete branch //删除分支七、**Tools 工具**八、**Help 帮助**关于git gui在线文档显示SSH密匙九、**分支内容相关9-10**Current Branch: hexo //当前分支:hexoUnstaged Changes //未提交的变化Unstaged Changes (Will Commit) //阶段提交内容十、**提交与消息11-12**Commit Message:Rescan //重新扫描Stage Changed //阶段改变Sign Off //签字Commit //提交Push //推New Commit //新提交Amend Last Commit //修改最后一次提交其他Destination Repository //目标库Arbitrary Location //任意位置Transfer Options //传输选项Force overwrite existing branch (may discard changes) //强制覆盖现有分支(可能放弃更改)Use thin pack (for slow network connections) //使用稍弱的包(用于慢速网络连接)Include tags //包括标签参考资料链接word 转换 html 格式：链接html 转换 md 格式：链接By: huanglei2019-3-8]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git gui</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown模板1]]></title>
    <url>%2F2019%2F2019-01-05-%E6%A8%A1%E6%9D%BF.html</url>
    <content type="text"><![CDATA[简介日志抓取方式 (简单)日志级别与简单使用 (简单)参考资料[TOC]#参考资料:如何抓取log链接adb抓取链接adb 分析链接Android中对Log日志文件的分析链接小米-adblog 使用链接]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Excel与测试用例]]></title>
    <url>%2F2019%2F2019-03-05-Excel.html</url>
    <content type="text"><![CDATA[简介excel常用于编写测试用例的部分函数pict测试用例生成工具参考资料[TOC]单元格IDhttps://www.ishuo.cn/show/52120.html=IF(F6=&quot;&quot;,&quot;&quot;,ROW()-3)如：=IF(G2=””,””,ROW(E2)-1)二、单元格格式（单元格背景色）链接数据,单元格有效性条件格式设置颜色统计出现次数链接=countif（range，criteria）其中range 表示要计算非空单元格数目的区域其中criteria 表示以数字、表达式或文本形式定义的条件eg:=COUNTIF(A2:A14,”赵四”)合并单元格快速计数链接备注：合并单元格，可以用格式刷函数：=counta(B2:B14)-sum(c3:c14)合并单元格快速汇总一列数据，转换成一行数据选择好复制的内容选中单元格，右键—选择性粘贴弹出二次框中，勾选上转置计算单元格中，出现的字符个数函数:=COUNTIF(A1：A20,&quot;高级工程师“）pict测试用例生成工具工具使用参考资料：ExcelHome - 全球领先的Excel门户链接如何破解EXCEL中的保护密码1链接如何破解EXCEL中的保护密码2链接Excel录入时开启单元格自动下拉菜单链接excel快速选定指定单元格区域链接excel中如何隐藏列和取消隐藏列链接]]></content>
      <categories>
        <category>测试用例</category>
        <category>Excel</category>
      </categories>
      <tags>
        <tag>excel</tag>
        <tag>pict</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fidder抓取资源.]]></title>
    <url>%2F2019%2F2019-03-05-Fidder%E6%8A%93%E5%8F%96%E8%B5%84%E6%BA%90.html</url>
    <content type="text"><![CDATA[简介日志抓取方式 (简单)日志级别与简单使用 (简单)参考资料[TOC]图标及所对应的释义实例，抓取APP更新音效资源(mp3),并批量下载一、先抓包-下载地址：https://www.telerik.com/download/fiddler/fiddler4二、抓包-手机代理设置https://blog.csdn.net/shimengran107/article/details/78644862https://www.cnblogs.com/meitian/p/4997310.html三、证书-下载地址：如果出现这个报错，需要安装证书http://www.telerik.com/docs/default-source/fiddler/addons/fiddlercertmaker.exe?sfvrsn=2四、环境配置好后， 抓取更新时的域名(野马)和文件（野马的mp3）从开头开始抓起，每个点开看下仔细求证五、多种下载文件方式双击链接复制链接六、找到需要的资源文件七、对刚刚获取到的文件进行处理，第一步http://note.youdao.com/noteshare?id=9f3a3b2cf06b048e08a665ada4335d31&amp;sub=73740C3D63184BF99DD22AA0AFCE92DF八、对刚刚获取到的文件进行处理，第二步http://note.youdao.com/noteshare?id=c776c17098cf1e53a895350dea5e600c&amp;sub=932202FB20D94B4FA4E2B93E38E647F6思考：抓包测试点，抓金币数值，然后修改数值进行欺骗操作 （WPE类似的工具）抓包测试点，抓牌型，修改牌（难难难~~~）参考资料:Fiddler+海马模拟器抓包教程链接失效利用Fiddler对Android模拟器网络请求进行抓包链接Fiddler使用教程1链接Fiddler使用教程2链接帮助介绍链接]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[adblogcat]]></title>
    <url>%2F2019%2F2019-03-05-adb%20logcat.html</url>
    <content type="text"><![CDATA[简介日志抓取方式 (简单)日志级别与简单使用 (简单)参考资料[TOC]DDMS 功能翻译//过滤logcat消息来源的标记,pid或最小日志级别。Filter logcat messages by the source’s tag, pid or minimum log level.//空字段将匹配所有消息。Empty fields will match all messages.123456filter name //过滤 by log tag //日志标记 by log message //日志消息 by pid by application name //应用程序名称 by log level //日志级别日志级别V -详细(最低优先级)D -调试I -信息W -警告E -错误F -致命的S -沉默简单使用与导出（略）1. 显示现在连接的手机设备：输入 **adb devices** + 回车 2. 抓log：输入 adb logcat + 回车 3. 停止抓log：使用ctrl + c 4. 将log导出：adb logcat &gt; d：1.txt（将log导出到d：/1.txt文件中） 5. adb shell 命令行下, 可以使用 exit 、ctrl + d 退出 日志获取方式并存储到本地命令与格式:logcat -v time -s *:E &gt; /mmt/sdcard/1.logeg:1234567adb logcat -v time -s appname:E&gt;d:/1.log）//输出到当前目录adb logcat -v time 1 &gt;.\\logcat.log//输出到指定目录adb logcat -v time 1 &gt;d:/logcats.log日志获取方式2adb logcat -v time thread &gt;d:/logcats.log根据应用PID，筛选日志3//获取应用的PID123adb shell dumpsys meminfo org.cocos2dx.FengHuangNiuNiu（ 46469 kB: org.cocos2dx.FengHuangNiuNiu (pid 8481 / activities)） adb logcat JPush:D * s | grep 8481参考资料:如何抓取log链接adb抓取链接adb 分析链接Android中对Log日志文件的分析链接小米-adblog 使用链接]]></content>
      <categories>
        <category>Android</category>
        <category>adb</category>
      </categories>
      <tags>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[adb monkey]]></title>
    <url>%2F2019%2F2019-03-05-adb%20monkey.html</url>
    <content type="text"><![CDATA[简介monkey抓取方式 (简单)简单使用与保存数据 (简单)[TOC]命令//P 指定测试的包//V 反馈信息级别 一个 -v增加一个级别 ， 默认级别为 0//S 指定产生随机事件种子值，相同的种子值产生相同的事件序列。如： -s 200//–throttle： 每个事件结束后的间隔时间——降低系统的压力（如不指定，系统会尽快的发送事件序列）。如：–throttle 300// –ignore-crashes 忽略崩溃// –ignore-timeouts 忽略超时//–monitor-native-crashes 跟踪本地方法的崩溃问题//–pct-touch 调整触摸事件的百分比//–pct-motion 调整移动事件的百分比//–pct-trackball 调整轨迹事件的百分比//–pct-nav 调整导航事件的百分比 （来自方向输入设备的up/down/left/right）基本使用格式//eg1:1adb shell monkey -p com.sankuai.meituan -s 500 --ignore-crashes --ignore-timeouts --monitor-native-crashes -v -v 10000 &gt; D:\Environment\SDK\android-sdk-windows\platform-tools\test.txt//eg2:1adb shell monkey -p com.youxigu.qixiongwushuang.uc -s 30 --ignore-crashes --ignore-timeouts --monitor-native-crashes --throttle 30 -v -v 2000 &gt; D:\Environment\SDK\android-sdk-windows\platform-tools\test.txt//eg3:1adb shell monkey -p com.youxigu.qixiongwushuang.uc -s 30 --throttle 30 -v -v 2000 &gt; D:\Environment\SDK\android-sdk-windows\platform-tools\test.txt命令组合在monkey测试中常用的命令组合有：简单的输出测试的信息。monkey -p com.yourpackage -v 500以深度为三级输出测试信息monkey -p com.yourpackage -v -v -v 500为测试分配一个专用的端口号，不过这个命令只能输出跳转的信息及有错误时输出信息monkey -p com.yourpackage --port 端口号 -v为随机数的事件序列定一个值，若出现问题下次可以重复同样的系列进行排错monkey -p com.yourpackage -s 数字 -v 500为每一次执行一次有效的事件后休眠300毫秒monkey -p com.yourpackage -v --throttle 300 500本机的sdk安装路径路径为SDK的platform-tools的安装路径输入或者shift+鼠标右键打开cmdF:\Program Files (x86)\Android\android-sdk\platform-tools2.本机的sdk安装路径D:\Environment\SDK\android-sdk-windows\platform-toolsadb shell出现error:device not found问题原因：说明安卓设备没有被找到解决办法：此时可以使用手机连接电脑，手机的USB模式必须打开，电脑上必须安装有手机的驱动，连上设备之后，我们在输入adb shell命令5.基本使用 随机操作12Monkey –p com.tencent.mobileqq –v 1000Monkey –p com.sankuai.meituan –v 1000此命令意思为执行1000次随机用户模拟操作， （com.tencent.mobileqq 为包名）输入adb空格shell：出现error:device not found，说明安卓设备没有被找到此时可以使用手机连接电脑，手机的USB模式必须打开，电脑上必须安装有手机的驱动，连上设备之后，我们在输入adb shell命令seed 种子count 数all ow package 所有包噢inc lude category 类别launcher 发射器monkey 猴子event 事件percentages 百分比switch 开关action 行动category 类别launch flags 启动标志component 组件finished 结束导出日志导出日志：monkey -p com.junte -v 100 &gt; /mnt/sdcard/monkey_test.txt//本机导出 monkey -p com.sankuai.meituan -v 100 &gt; /mnt/sdcard/monkey_test.txtadb shell monkey -p com.sankuai.meituan -v 100 &gt; .\\abcdefg.txt保存log日志到pcadb shell monkey [option]&gt;d:\monkey.txt标准流和错误流分开保存标准流与错误流分开保存，代码如下：Monkey [option] &lt;count&gt; 1&gt;/sdcard/monkey.txt 2&gt;/sdcard/error.txteg:adb shell monkey -v 100 1&gt;d:\monkey.log 2&gt;d:\error.log执行以上命令，Monkey的运行日志和异常日志将被分开保存。此时Monkey的运行日志将被保存在monkey.txt文件中，而异常日志将被保存在D盘下的error.txt中参考资料monkey 介绍：链接Monkey 测试环境搭建链接1. SDK Manager 2. 翻墙工具下载(笔记本-翻墙工具)、离线安装 3. Eclipse安装安卓项目(ADT) MonkeyRunner：MonkeyRunner测试环境配置（一）链接MonkeyRunner测试环境配置（二）链接MonkeyRunner测试环境配置（三）链接MonkeyRunner测试环境配置（四）链接MonkeyRunner测试环境配置（五）链接]]></content>
      <categories>
        <category>Android</category>
        <category>adb</category>
      </categories>
      <tags>
        <tag>monkey</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[adb搭建与使用及连接和获取包名]]></title>
    <url>%2F2019%2F2019-03-05-adb%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%BF%9E%E6%8E%A5%E5%92%8C%E8%8E%B7%E5%8F%96%E5%8C%85%E5%90%8D.html</url>
    <content type="text"><![CDATA[简介Android环境搭建adb基本命令使用adb与设备链接包名和activity获取appium自动启动设备视频录制与截图参考资料[TOC]前期环境搭建完毕命令格式-p 指定软件包名查看版本号及安装路径1234C:\Users\Administrator&gt;adb versionAndroid Debug Bridge version 1.0.40Version 4986621Installed as D:\android_sdk\android_sdk\android_sdk\platform-tools\adb.exe查找包名方法和移除##查找包名和activity,获取方式1(后面有简洁，不适用，后续补上链接)列出目标设备中已安装的应用程序包adb shell pm list packages列出目标设备中已安装的应用程序包 和 启动时的PIDadb shell dumpsys meminfoeg:搜索 cmp=com.yys.qp.nex1231、cmd2、adb shell3、logcat *:S ActivityManager:V查找包名和activity,获取方式21aapt dump badging xxxx.apk查找包名和activity,获取方式3123aapt dump badgingapk| find &quot;launchable-activity&quot;获取后，通过activity，进行启动apk通过appium客户端工具，配置信息，即可启动设备（手机或模拟器）//点击start,启动服务//启动后点搜索图标//配置信息eg：1234567&#123; &quot;platformName&quot;: &quot;Android&quot;, &quot;platformVersion&quot;: &quot;7.0&quot;, &quot;deviceName&quot;: &quot;Redmi Note 4X&quot;, &quot;appPackage&quot;: &quot;com.yys.qp.wulingyuan&quot;, &quot;appActivity&quot;: &quot;org.cocos2dx.javascript.AppActivity&quot;&#125;//点击start session ,即可启动，用于自动化方向了。手机上包名activityname获取123451.启动被测程序2.打开DOS环境，输入命令： adb shell dumpsys window w | findstr \/ | findstr name=或 adb shell dumpsys window |findstr mCurrent或 adb shell &quot;dumpsys window w|grep \/|grep name=|sed &apos;s/mSurface=Surface(name=//g&apos;|sed &apos;s/)//g&apos;|sed &apos;s/ //g&apos;&quot;服务进程启动计算机adb 服务进程adb start-server关闭计算机adb 服务进程adb kill-server由于命令常用，建议封装成bat封装跳转设备识别真机识别12345C:\Users\Administrator&gt;adb devicesList of devices attachedadb server version (31) doesn&apos;t match this client (40); killing...* daemon started successfully35eb04eb0704 device模拟器识别首先把tools里的adb命令复制到模拟器页面，修改并备份12345678910111213//进入模拟器目录C:\Users\Administrator&gt;cd D:\Program Files (x86)\Nox\binC:\Users\Administrator&gt;d:// 在连接设备之前，先查看一下在运行的设备：D:\Program Files (x86)\Nox\bin&gt;nox_adb.exe devices 35eb04eb0704 device 127.0.0.1:62001 device// 也可以简洁查看命令D:\Program Files (x86)\Nox\bin&gt;adb devicesList of devices attached 35eb04eb0704 device//模拟器设备 127.0.0.1:62001 device设备连接真机连接1234//包在tools目录页，可以直接安装adb -s 35eb04eb0704 install -r xxx.apk//获取拖拽adb -s 35eb04eb0704 install C:\Users\Administrator\Desktop\xxx.apk模拟器连接1adb connect 127.0.0.1:62001移除程序包1adb uninstall com.XXXXXeg:(adb uninstall com.game.C2X)封装封装跳转封装成bat文件123456echo off 封装 连接夜神模拟器 cd D:\Program Files (x86)\Nox\bin d: nox_adb.exe devices adb connect 127.0.0.1:62001pause重启usb设备123456: 这是注释，不会显示在dos上% 这是注释 % ，不会显示在dos上rem 这是注释，会显示在dos上echo off 以上都是注释方法，会显示在dos上 adb usbpause视频录制(screenrecord)1adb shell screenrecord --bit-rate 6000000 /sdcard/XXXX.mp4解释:录制手机屏幕视频格式为mp4存放到手机sd卡里默认录制时间为180s限制录制时间--time-limiteg: 录制时间为20sadb shell screenrecord --time-limit 20 /sdcard/xxxx.mp4指定视频分辨率大小：--sizeeg：分辨率为1280 720`adb shell screenrecord –size 1280720 /sdcard/demo.mp4`指定视频的比特率--bit-rateeg:质量6Madb shell screenrecord --bit-rate 6000000 /sdcard/xxxx.mp4说明:指定视频的比特率为6Mbps,如果不指定,默认为4Mbps.增加比特率以提高视频质量或为了让文件更小而降低比特率屏幕截图并导出(screencap)截图保存到SD卡里adb shell screencap -p /sdcard/1.jpgSD卡里导出图片//所在文件夹下12adb pull /sdcard/1.jpgadb pull /sdcard/1.jpg D:\Environment\SDK\android-sdk-windows\platform-tools//指定文件夹下adb pull /sdcard/1.jpg D:\Environment删除SD卡里图片adb shell rm /sdcard/1.png参考资料:android环境搭建与项目创建链接android官网链接Android SDK 安装教程链接android studio 安装与问题解决办法链接adb录制手机屏幕链接1链接2MonkeyRunner测试环境配置（一） 链接Android APK反编译详解链接视频录制链接adb录制手机屏幕–魅族手机案例链接模拟器连接adb(此处以夜神为例)链接模拟器连接adb（此处分别演示模拟器和真机连接）链接当多个手机同时连接电脑，adb 命令中如何进入指定设备链接其他：Android APK反编译详解链接用Eclipse安装ADT插件搭建Android环境(图文)链接创建和使用AVD链接eclipse中没有出现AVD链接]]></content>
      <categories>
        <category>Android</category>
        <category>adb</category>
      </categories>
      <tags>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql常用命令]]></title>
    <url>%2F2019%2F2019-03-05-mysql.html</url>
    <content type="text"><![CDATA[简介常用的命令 (简单)查询、修改、添加 (简单)[TOC]常用的命令搜索模糊搜索SELECT * FROM user_inf WHERE flatId LIKE &#39;%qaqa%&#39; ;字段搜索SELECT * FROM user_inf WHERE userId = 103427 ;批量搜索SELECT * FROM user_inf WHERE userId in (101010 ,101026 ) ;指定筛选搜索某字段SELECT userId,flatId,name,freeCards,cards FROM user_inf WHERE userId = 103427 ;分组查询select clubid,userid from club_user_new group by clubid,userid HAVING count(1) &gt; 1;and查询 //同一表内SELECT * FROM club_user_new WHERE clubid = 924545 and userid = 101131 ;排序升序 //对字段flatid进行排序SELECT * FROM user_inf WHERE userId = 103427 ORDER BY flatid ASC ;降序 //对字段flatid进行降序SELECT * FROM user_inf WHERE userId = 103427 ORDER BY flatid DESC ;判断不等于条件判断 //此次符号为不等于，先查询出问题的数据SELECT * FROM user_inf WHERE playingTableId &lt;&gt; 0 ;大于、等于、小于、大/小+等于SELECT * FROM user_glod_inf WHERE pumpnum AND CREATEdate &gt; &#39;2019-01-06 00:00:00&#39; ;SELECT * FROM user_glod_inf WHERE pumpnum AND CREATEdate = &#39;2019-01-06 00:00:00&#39; ;SELECT * FROM user_glod_inf WHERE pumpnum AND CREATEdate &lt; &#39;2019-01-06 00:00:00&#39; ;SELECT * FROM user_glod_inf WHERE pumpnum AND CREATEdate &lt;= &#39;2019-01-06 00:00:00&#39; ;SELECT * FROM user_glod_inf WHERE pumpnum AND CREATEdate &gt;= ‘2019-01-06 00:00:00’字段修改单独修改更改 //把符号playingTableId字段的数据，修改为0UPDATE user_inf SET playingTableId = 0 WHERE playingTableId = 224237 ;全部修改//把符号playingTableId字段的一列的数据，修改为0 `UPDATE user_inf SET playingTableId = 0 ;` 批量添加用户/–俱乐部批量添加用户–/SELECT * FROM club_msg WHERE userid = 101205 ;select “INSERT INTO club_user (userid, clubid, jointime, type, score, allscore, win, allwin, fail, allfail) VALUES (‘’, ‘363498’, ‘2018-03-26 16:41:34’, ‘0’, ‘0’, ‘0’, ‘0’, ‘0’, ‘0’, ‘0’);”selectCONCAT(“INSERT INTO club_user (userid, clubid, jointime, type, score, allscore, win, allwin, fail, allfail) VALUES (‘“,userId,”‘, ‘151361’, ‘2018-03-26 16:41:34’, ‘0’, ‘0’, ‘0’, ‘0’, ‘0’, ‘0’, ‘0’);”)from user_inf where userid &lt;&gt; ‘101205’;删除删除表DELETE table club_user/–批量删除用户–/根据ID删除DELETE FROM club_user WHERE id in(581 , 589 , 588 , 587 , 586 , 585) ;根据ID区间删除DELETE FROM club_user WHERE id &gt; 861 and id &lt; 872 ;修改某俱乐部的ID为靓号eg:先查询俱乐部信息，再修改1234update club_inf_new set clubid = 588888 where clubid = 417828;update club_user_new set clubid = 588888 where clubid = 417828;update daikai_table_club_new set clubid = 588888 where clubid = 417828;update daikai_table_club_user set clubid = 588888 where clubid = 417828;参考资料:绿色安装包 百度网盘地址：提取码：btu7绿色安装包 安装教程链接mysql 安装教程非最新版本删除命令TRUNCATE,DELETE,DROP的区别链接打开命令行工具，立马闪退链接输入密码，立马闪退链接]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wpe简单使用二]]></title>
    <url>%2F2019%2F2019-03-04-wpe%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%BA%8C.html</url>
    <content type="text"><![CDATA[简介wpe教程[TOC]抓取的数据注意点一：IP地址后面的数字“15”这个代表了封包的长度 （一般数字越小，那个封包就是我们要找的）注意点二：带字母的代码，都是十六进制代码例如：FF， OB， F1，分析过程&gt; 找到的发送参数 进行分析过程拆解1.第一组B1=177 B0=176 2.第二组B8=184 BB=187 3.那么我们现在用加减法的方法计算着两组代码的规律：第二组减去第一组B8-B1=184-177=7 BB-B0=187-176=11 4.分析下一组封包中的代码:B8+7 BB+11 184+7=191 187+11=198 5.把这两个数字换成十六进制191=BF 198=C6 6.之后双击修改，发送模拟器连接方式靠谱打开靠谱助手的安装目录搜索“net”然后找到kpbs98A-Network双击打开（不要关闭）找到kpbs98A-Network双击打开夜神参考资料冒险岛手游修改步骤链接wpe三件套链接：提取码：crdv]]></content>
      <categories>
        <category>WPE</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>wpe</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[地址收藏与整理]]></title>
    <url>%2F2019%2F2019-02-28-%E5%9C%B0%E5%9D%80%E6%94%B6%E8%97%8F%E4%B8%8E%E6%95%B4%E7%90%86.html</url>
    <content type="text"><![CDATA[地址收藏GitHub： 链接：xxx码云： 链接：xxx]]></content>
      <categories>
        <category>网址</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git指令 基本格式整理]]></title>
    <url>%2F2019%2F2019-02-28-git%E6%8C%87%E4%BB%A4.html</url>
    <content type="text"><![CDATA[常用的 Git 指令[TOC]GitHub创建仓库提示代码echo &quot;# 项目名&quot; &gt;&gt; README.md git init git add README.md git commit -m &quot;first commit&quot; git remote add origin git@github.com:qiubaiying/项目名.git git push -u origin master 若仓库存在直接pushgit remote add origin git@github.com:qiubaiying/test.git git push -u origin master 常用操作创建仓库（初始化）在当前指定目录下创建 git init 新建一个仓库目录 git init [project-name] 克隆一个远程项目 git clone [url] 添加文件到缓存区添加所有变化的文件 git add . 添加名称指定文件 git add text.txt 配置设置提交代码时的用户信息 git config [--global] user.name &quot;[name]&quot; git config [--global] user.email &quot;[email address]&quot; 提交提交暂存区到仓库区 git commit -m &quot;msg&quot; # 提交暂存区的指定文件到仓库区 $ git commit [file1] [file2] ... -m [message] # 提交工作区自上次commit之后的变化，直接到仓库区 $ git commit -a # 提交时显示所有diff信息 $ git commit -v # 使用一次新的commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次commit的提交信息 $ git commit --amend -m [message] # 重做上一次commit，并包括指定文件的新变化 $ git commit --amend [file1] [file2] ... 远程同步# 下载远程仓库的所有变动 $ git fetch [remote] # 显示所有远程仓库 $ git remote -v # 显示某个远程仓库的信息 $ git remote show [remote] # 增加一个新的远程仓库，并命名 $ git remote add [shortname] [url] # 取回远程仓库的变化，并与本地分支合并 $ git pull [remote] [branch] # 上传本地指定分支到远程仓库 $ git push [remote] [branch] # 强行推送当前分支到远程仓库，即使有冲突 $ git push [remote] --force # 推送所有分支到远程仓库 $ git push [remote] --all 分支# 列出所有本地分支 $ git branch # 列出所有远程分支 $ git branch -r # 列出所有本地分支和远程分支 $ git branch -a # 新建一个分支，但依然停留在当前分支 $ git branch [branch-name] # 新建一个分支，并切换到该分支 $ git checkout -b [branch] # 新建一个分支，指向指定commit $ git branch [branch] [commit] # 新建一个分支，与指定的远程分支建立追踪关系 $ git branch --track [branch] [remote-branch] # 切换到指定分支，并更新工作区 $ git checkout [branch-name] # 切换到上一个分支 $ git checkout - # 建立追踪关系，在现有分支与指定的远程分支之间 $ git branch --set-upstream [branch] [remote-branch] # 合并指定分支到当前分支 $ git merge [branch] # 选择一个commit，合并进当前分支 $ git cherry-pick [commit] # 删除分支 $ git branch -d [branch-name] # 删除远程分支 $ git push origin --delete [branch-name] $ git branch -dr [remote/branch] 标签Tags添加标签 在当前commit git tag -a v1.0 -m &apos;xxx&apos; 添加标签 在指定commit git tag v1.0 [commit] 查看 git tag 删除 git tag -d V1.0 删除远程tag git push origin :refs/tags/[tagName] 推送 git push origin --tags 拉取 git fetch origin tag V1.0 新建一个分支，指向某个tag git checkout -b [branch] [tag] 查看信息# 显示有变更的文件 $ git status # 显示当前分支的版本历史 $ git log # 显示commit历史，以及每次commit发生变更的文件 $ git log --stat # 搜索提交历史，根据关键词 $ git log -S [keyword] # 显示某个commit之后的所有变动，每个commit占据一行 $ git log [tag] HEAD --pretty=format:%s # 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件 $ git log [tag] HEAD --grep feature # 显示某个文件的版本历史，包括文件改名 $ git log --follow [file] $ git whatchanged [file] # 显示指定文件相关的每一次diff $ git log -p [file] # 显示过去5次提交 $ git log -5 --pretty --oneline # 显示所有提交过的用户，按提交次数排序 $ git shortlog -sn # 显示指定文件是什么人在什么时间修改过 $ git blame [file] # 显示暂存区和工作区的差异 $ git diff # 显示暂存区和上一个commit的差异 $ git diff --cached [file] # 显示工作区与当前分支最新commit之间的差异 $ git diff HEAD # 显示两次提交之间的差异 $ git diff [first-branch]...[second-branch] # 显示今天你写了多少行代码 $ git diff --shortstat &quot;@{0 day ago}&quot; # 显示某次提交的元数据和内容变化 $ git show [commit] # 显示某次提交发生变化的文件 $ git show --name-only [commit] # 显示某次提交时，某个文件的内容 $ git show [commit]:[filename] # 显示当前分支的最近几次提交 $ git reflog 撤销# 恢复暂存区的指定文件到工作区 $ git checkout [file] # 恢复某个commit的指定文件到暂存区和工作区 $ git checkout [commit] [file] # 恢复暂存区的所有文件到工作区 $ git checkout . # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 $ git reset [file] # 重置暂存区与工作区，与上一次commit保持一致 $ git reset --hard # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 $ git reset [commit] # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 $ git reset --hard [commit] # 重置当前HEAD为指定commit，但保持暂存区和工作区不变 $ git reset --keep [commit] # 新建一个commit，用来撤销指定commit # 后者的所有变化都将被前者抵消，并且应用到当前分支 $ git revert [commit] # 暂时将未提交的变化移除，稍后再移入 $ git stash $ git stash pop 其他# 生成一个可供发布的压缩包 $ git archives]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 指令整理]]></title>
    <url>%2F2019%2F2019-02-28-Hexo%20%E5%9F%BA%E6%9C%AC%E6%95%99%E7%A8%8B.html</url>
    <content type="text"><![CDATA[简介：1、Hexo 基本教程2、常用命令[TOC]基本操作访问模式：本地调试：http://localhost:4000 域：http://huanglei520.xyz调试与坏境安装与调试npm install hexo-cli -g//安装hexo 此外npm install -g hexo-clihexo init blog//初始化安装博客文件夹cd blog || cd ..\//进入命令 //返回上一文件夹npm installhexo servernpm list hexo-deployer-gitgit config –global credential.helper wincredssh-keygen -t rsa –C “rockinghl@163.com”//密匙，需要授权的话，可再打该命令Git上传/推送git init//初始化成可管理的本地仓库 ，跟踪管理版本git add xxx//添加文件到暂存区 （如svn的添加）git add .​ //添加所有未修改的文件（有空格 + 点号）git commit -m “注释信息”//可中文 空格git status//查看状态初次修改前需要pull ，之后每次提交需要查看释义：在主支干上，有工作记录未提交git remote add origin https://github.com/qq552743/qq552743.github.io//连接远程仓库git push -u origin master//把本地内容提交到远程仓库的主干上git push origin master加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。eg:git diff readme.txt​ //查看文件如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。cat xxxxx.xxx//查看文件内容git log//查看历史信息rm//删除命令 需要删下层得进入文件夹下git checkout – xxx//恢复命令下载/克隆/拉取git clone https://github.com/qq552743/qq552743.github.io//拉取这是基于有环境下，如果无环境，需要走安装步骤eg:https://blog.csdn.net/baozhiqiangjava/article/details/81106046?utm_source=blogxgwz3分支git branch xx//查看当前连接分支git branch -a//查看所有分支git branch hexo//创建分支git checkout -b hexo//创建+切换 到该hexo分支git checkout master \ hexo//切换到主分支 \ 分支git merge xxx//合并某分支内容到当前*分支上git branch -d xxx//删除分支其他注意项git pull –rebase origin master在你准备上传你的项目之前，最好更新一下项目，确保没有和远程仓库的代码有冲突]]></content>
      <categories>
        <category>Hexo</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用颜色值速查]]></title>
    <url>%2F2019%2F2019-02-28-%E5%B8%B8%E7%94%A8%E9%A2%9C%E8%89%B2%E5%80%BC%E9%80%9F%E6%9F%A5.html</url>
    <content type="text"><![CDATA[常用颜色值速查↓ 91种color –by huanglei ↓redgreenbluemagentayellowchocolateblackaquamarinelimefuchsiabrassazurebrownbronzedeeppinkalicebluegraycoppercoralfeldsparorangeorchidpinkplumquartzpurplealiceblueantiquewithblanchedalmondbluevioletbeigeburlywoodbisquecadetbluepinksaddlebrownroyalbluerosybrownpurpleorengeredolivedrabpowderbluepeachpuffpapayawhippaleturquoisepalevioletredpalegreennavybluenavajowhitepalegodenrodvioletredyellowgreentomatoturquoisethistlespringgreensteelbluesalmonscarletsiennasilvertanthistleturquoisevioletsnowsalmonscarletsiennasilvertanthistleturquoisevioletchartreusefirebrickgoldkhakimediumslatebluemediumvioletredoldlacemaroomgoldenrodwheatwhitesmokeorangemoccasinmistyrosemintcreammidnightbluedimgraydarksalmonslategrayskybluesiennaseashellsalmonseagreensandybrownfirebrickgoldkhakimaroomgoldenrodwheatwhitesmokemediumturquoisenavymediumspringgreenmediumseagreenmediumpurpulperumediumorchidmediumbluemediumaquamarinemaroonlimegreenlightyellowlightsteelbluemagentalightslatebluelightslategraylightskyblueinenlightseagreenlightsalmonlightpinkplumlightgraylightgreenlightgodenrodyellowindianredlavenderlightbluelavenderblushlightcorallightcyanlightgodenrodhotpinkgreenyellowlemonchiffonlawngreenkhakideepskybluehoneydewgolenrodforestgreengostwhitegreenyellowgainsborofirebrickdodgerbluedarkturquoisedarkslatebluedarkslategraydarkseagreendarkreddarkorchiddarkorengedarkslatebluedarkvioletfloralwhitecyanbisque darkgraycornsilkdarkolivegreendarkgoldenroddarkbluedarkcyandarkgreendarkhakiivorydarkmagentadarkgraycornfloewrbluecornfloewrbluedarkvioletfloralwhite待 补待 补darkslategraydarkseagreendarkreddarkorchiddarkorengedarkslateblue置顶]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>color</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo新电脑上怎么更新博客]]></title>
    <url>%2F2019%2F2019-02-28-Hexo%20%E6%96%B0%E7%94%B5%E8%84%91%E4%B8%8A%E6%80%8E%E4%B9%88%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2.html</url>
    <content type="text"><![CDATA[[TOC]大佬整理的链接：https://blog.csdn.net/a3212/article/details/80095758参考资料：https://www.zhihu.com/question/21193762http://fangzh.top/2018/2018090715/ （详细）一、引言其实，Hexo生成的文件里面是有一个.gitignore的，所以它的本意应该也是想我们把这些文件放到GitHub上存放的。但是考虑到如果每个GitHub Pages都需要额外的一个仓库存放这些文件，就显得特别冗余了。这个时候就可以用分支的思路！一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。二、搭建的流程创建仓库，qq552743.github.io;创建两个分支：master 与 hexo；设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；Settings–&gt;branches–&gt;default branch;使用git clone https://github.com/qq552743/qq552743.github.io.git 拷贝仓库；_config.yml，theme/，source/，scaffolds/，package.json，.gitignore ,源拷贝进来.git/，node_modules/，public/，.deploy_git/，db.json文件需要删除，别拷贝进来在本地qq552743.github.io 文件夹下通过Git bash依次执行npm install hexo、-hexo init-、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;执行完如果不慎删除。git文件，（最好不要初始化），需要再重新建个git init, git checkout -b hexo分支就好了（window下）修改_config.yml中的deploy参数，分支应为master；依次执行git add .、git commit -m “source first”、git push origin hexo提交网站相关的文件；执行hexo g -d生成网站并部署到GitHub上。这样一来，在GitHub上的仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！ + nice！其他：部署前需要安装的插件1、为了建立RSS订阅，需要安装npm install hexo-generator-feed –save2、为了建立站点地图，需要安装npm install hexo-generator-sitemap –save三、日常的改动流程在本地对博客进行修改、添加新博文、修改样式等等可以参照以下流程：依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）；然后才执行hexo g -d发布网站到master分支上。虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催…的情况，调转顺序就有问题了）。四、拉取备份本地资料丢失后的流程当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：使用git clone https://github.com/qq552743/qq552743.github.io.git 拷贝仓库（默认分支为hexo）；在本地新拷贝的http://catalinaLi.github.io 文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。五、其他存储方式1.码云上存储源码 思路与github一样2.网盘、U盘拷贝四大金刚，依次执行操作后再进行写博客六、其他问题（error）1、缺少git repository解决办法：ssh key 相关2、hexo init会把 .git 干掉，再git init的话，就不能push了。。这个怎么弄呀？解决办法1：先把.git文件夹复制到其它目录，git init 完后，再把.git文件夹拷回来解决办法2：git rm -rf –cached themes/主题名,除原本仓库的git记录,之后在作为普通文件夹添加(commit)3、next主题到仓库里，打不开解决办法：由于文件里面有。git文件导致]]></content>
      <categories>
        <category>Hexo</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[模板基本格式整理]]></title>
    <url>%2F2019%2F2019-02-28-%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F%E6%95%B4%E7%90%86.html</url>
    <content type="text"><![CDATA[#格式整理链接：https://www.mdeditor.com/#标题一##标题二###标题三####标题四#####标题五这是加粗这是斜体这是横线,删除线·无序列表·无序列表1.有序列表12.有序列表2‘内嵌代码’‘’’￥代码块‘’’引用Create a new post1$ hexo new "My New Post"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deployMore info: Deployment]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
