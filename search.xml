<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo 基本教程]]></title>
    <url>%2F2019%2F02%2F27%2FHexo%20%E6%96%B0%E7%94%B5%E8%84%91%E4%B8%8A%E6%80%8E%E4%B9%88%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[[TOC] 大佬整理的链接：https://blog.csdn.net/a3212/article/details/80095758参考资料：https://www.zhihu.com/question/21193762 一、引言其实，Hexo生成的文件里面是有一个.gitignore的，所以它的本意应该也是想我们把这些文件放到GitHub上存放的。但是考虑到如果每个GitHub Pages都需要额外的一个仓库存放这些文件，就显得特别冗余了。这个时候就可以用分支的思路！一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。 二、搭建的流程 创建仓库，qq552743.github.io; 创建两个分支：master 与 hexo； 设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）； Settings–&gt;branches–&gt;default branch; 使用git clone https://github.com/qq552743/qq552743.github.io.git 拷贝仓库； 在本地qq552743.github.io 文件夹下通过Git bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）; 修改_config.yml中的deploy参数，分支应为master； 依次执行git add .、git commit -m “source first”、git push origin hexo提交网站相关的文件； 执行hexo g -d生成网站并部署到GitHub上。这样一来，在GitHub上的仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！ + nice！ 三、日常的改动流程在本地对博客进行修改、添加新博文、修改样式等等可以参照以下流程： 依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）； 然后才执行hexo g -d发布网站到master分支上。虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催…的情况，调转顺序就有问题了）。 四、拉取备份本地资料丢失后的流程当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤： 使用git clone https://github.com/qq552743/qq552743.github.io.git 拷贝仓库（默认分支为hexo）； 在本地新拷贝的http://catalinaLi.github.io 文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。 五、其他方式1.码云上存储源码 思路与github一样2.网盘、U盘拷贝四大金刚，依次执行操作后再进行写博客]]></content>
      <tags>
        <tag>-命令格式 -教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 基本教程]]></title>
    <url>%2F2019%2F02%2F27%2FHexo%20%E5%9F%BA%E6%9C%AC%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[简介：Hexo 基本教程常用命令[TOC] 基本操作访问模式：本地调试：http://localhost:4000 域：http://huanglei520.xyz 调试与坏境安装与调试npm install hexo-cli -g//安装hexo 此外npm install -g hexo-cli hexo init blog//初始化安装博客文件夹 cd blog || cd ..\//进入命令 //返回上一文件夹 npm installhexo server npm list hexo-deployer-gitgit config –global credential.helper wincredssh-keygen -t rsa –C “rockinghl@163.com”//密匙，需要授权的话，可再打该命令 Git上传/推送git init//初始化成可管理的本地仓库 ，跟踪管理版本 git add xxx//添加文件到暂存区 （如svn的添加） git add .​ //添加所有未修改的文件（有空格 + 点号） git commit -m “注释信息”//可中文 空格 git status//查看状态 初次修改前需要pull ，之后每次提交需要查看 释义： 在主支干上，有工作记录未提交 git remote add origin https://github.com/qq552743/qq552743.github.io//连接远程仓库 git push -u origin master//把本地内容提交到远程仓库的主干上 git push origin master 加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。 eg: git diff readme.txt​ //查看文件 如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。 cat xxxxx.xxx//查看文件内容 git log//查看历史信息 rm//删除命令 需要删下层得进入文件夹下 git checkout – xxx//恢复命令 下载/克隆/拉取git clone https://github.com/qq552743/qq552743.github.io//拉取 这是基于有环境下，如果无环境，需要走安装步骤 eg:https://blog.csdn.net/baozhiqiangjava/article/details/81106046?utm_source=blogxgwz3 分支git branch xx//查看当前连接分支 git branch -a//查看所有分支 git branch hexo//创建分支 git checkout -b hexo//创建+切换 到该hexo分支 git checkout master \ hexo//切换到主分支 \ 分支 git merge xxx//合并某分支内容到当前*分支上 git branch -d xxx//删除分支 其他注意项git pull –rebase origin master在你准备上传你的项目之前，最好更新一下项目，确保没有和远程仓库的代码有冲突]]></content>
      <tags>
        <tag>-命令格式 -教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F02%2F26%2F%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 这是我的博客Create a new post 1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F26%2F%E5%B8%B8%E7%94%A8%E9%A2%9C%E8%89%B2%E5%80%BC%E9%80%9F%E6%9F%A5%2F</url>
    <content type="text"><![CDATA[常用颜色值速查 ↓ 91种color –by huanglei ↓ red green blue magenta yellow chocolate black aquamarine lime fuchsia brass azure brown bronze deeppink aliceblue gray copper coral feldspar orange orchid pink plum quartz purple aliceblue antiquewith blanchedalmond blueviolet beige burlywood bisque cadetblue pink saddlebrown royalblue rosybrown purple orengered olivedrab powderblue peachpuff papayawhip paleturquoise palevioletred palegreen navyblue navajowhite palegodenrod violetred yellowgreen tomato turquoise thistle springgreen steelblue salmon scarlet sienna silver tan thistle turquoise violet snow salmon scarlet sienna silver tan thistle turquoise violet chartreuse firebrick gold khaki mediumslateblue mediumvioletred oldlace maroom goldenrod wheat whitesmoke orange moccasin mistyrose mintcream midnightblue dimgray darksalmon slategray skyblue sienna seashell salmon seagreen sandybrown firebrick gold khaki maroom goldenrod wheat whitesmoke mediumturquoise navy mediumspringgreen mediumseagreen mediumpurpul peru mediumorchid mediumblue mediumaquamarine maroon limegreen lightyellow lightsteelblue magenta lightslateblue lightslategray lightskyblue inen lightseagreen lightsalmon lightpink plum lightgray lightgreen lightgodenrodyellow indianred lavender lightblue lavenderblush lightcoral lightcyan lightgodenrod hotpink greenyellow lemonchiffon lawngreen khaki deepskyblue honeydew golenrod forestgreen gostwhite greenyellow gainsboro firebrick dodgerblue darkturquoise darkslateblue darkslategray darkseagreen darkred darkorchid darkorenge darkslateblue darkviolet floralwhite cyan bisque darkgray cornsilk darkolivegreen darkgoldenrod darkblue darkcyan darkgreen darkhaki ivory darkmagenta darkgray cornfloewrblue cornfloewrblue darkviolet floralwhite 待 补 待 补 darkslategray darkseagreen darkred darkorchid darkorenge darkslateblue 置顶]]></content>
  </entry>
  <entry>
    <title><![CDATA[格式代码整理]]></title>
    <url>%2F2019%2F02%2F24%2Fpost-title%2F</url>
    <content type="text"><![CDATA[#格式整理 #标题一 ##标题二 ###标题三 ####标题四 #####标题五 这是加粗 这是斜体 这是横线,删除线 ·无序列表·无序列表 1.有序列表12.有序列表2 ‘内嵌代码’ ‘’’￥代码块‘’’ 引用 Create a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>-命令格式 -了解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git指令整理]]></title>
    <url>%2F2019%2F02%2F15%2Fgit%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[常用的 Git 指令 GitHub创建仓库提示代码echo &quot;# 项目名&quot; &gt;&gt; README.md git init git add README.md git commit -m &quot;first commit&quot; git remote add origin git@github.com:qiubaiying/项目名.git git push -u origin master 若仓库存在直接push git remote add origin git@github.com:qiubaiying/test.git git push -u origin master 常用操作创建仓库（初始化）在当前指定目录下创建 git init 新建一个仓库目录 git init [project-name] 克隆一个远程项目 git clone [url] 添加文件到缓存区添加所有变化的文件 git add . 添加名称指定文件 git add text.txt 配置设置提交代码时的用户信息 git config [--global] user.name &quot;[name]&quot; git config [--global] user.email &quot;[email address]&quot; 提交提交暂存区到仓库区 git commit -m &quot;msg&quot; # 提交暂存区的指定文件到仓库区 $ git commit [file1] [file2] ... -m [message] # 提交工作区自上次commit之后的变化，直接到仓库区 $ git commit -a # 提交时显示所有diff信息 $ git commit -v # 使用一次新的commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次commit的提交信息 $ git commit --amend -m [message] # 重做上一次commit，并包括指定文件的新变化 $ git commit --amend [file1] [file2] ... 远程同步# 下载远程仓库的所有变动 $ git fetch [remote] # 显示所有远程仓库 $ git remote -v # 显示某个远程仓库的信息 $ git remote show [remote] # 增加一个新的远程仓库，并命名 $ git remote add [shortname] [url] # 取回远程仓库的变化，并与本地分支合并 $ git pull [remote] [branch] # 上传本地指定分支到远程仓库 $ git push [remote] [branch] # 强行推送当前分支到远程仓库，即使有冲突 $ git push [remote] --force # 推送所有分支到远程仓库 $ git push [remote] --all 分支# 列出所有本地分支 $ git branch # 列出所有远程分支 $ git branch -r # 列出所有本地分支和远程分支 $ git branch -a # 新建一个分支，但依然停留在当前分支 $ git branch [branch-name] # 新建一个分支，并切换到该分支 $ git checkout -b [branch] # 新建一个分支，指向指定commit $ git branch [branch] [commit] # 新建一个分支，与指定的远程分支建立追踪关系 $ git branch --track [branch] [remote-branch] # 切换到指定分支，并更新工作区 $ git checkout [branch-name] # 切换到上一个分支 $ git checkout - # 建立追踪关系，在现有分支与指定的远程分支之间 $ git branch --set-upstream [branch] [remote-branch] # 合并指定分支到当前分支 $ git merge [branch] # 选择一个commit，合并进当前分支 $ git cherry-pick [commit] # 删除分支 $ git branch -d [branch-name] # 删除远程分支 $ git push origin --delete [branch-name] $ git branch -dr [remote/branch] 标签Tags添加标签 在当前commit git tag -a v1.0 -m &apos;xxx&apos; 添加标签 在指定commit git tag v1.0 [commit] 查看 git tag 删除 git tag -d V1.0 删除远程tag git push origin :refs/tags/[tagName] 推送 git push origin --tags 拉取 git fetch origin tag V1.0 新建一个分支，指向某个tag git checkout -b [branch] [tag] 查看信息# 显示有变更的文件 $ git status # 显示当前分支的版本历史 $ git log # 显示commit历史，以及每次commit发生变更的文件 $ git log --stat # 搜索提交历史，根据关键词 $ git log -S [keyword] # 显示某个commit之后的所有变动，每个commit占据一行 $ git log [tag] HEAD --pretty=format:%s # 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件 $ git log [tag] HEAD --grep feature # 显示某个文件的版本历史，包括文件改名 $ git log --follow [file] $ git whatchanged [file] # 显示指定文件相关的每一次diff $ git log -p [file] # 显示过去5次提交 $ git log -5 --pretty --oneline # 显示所有提交过的用户，按提交次数排序 $ git shortlog -sn # 显示指定文件是什么人在什么时间修改过 $ git blame [file] # 显示暂存区和工作区的差异 $ git diff # 显示暂存区和上一个commit的差异 $ git diff --cached [file] # 显示工作区与当前分支最新commit之间的差异 $ git diff HEAD # 显示两次提交之间的差异 $ git diff [first-branch]...[second-branch] # 显示今天你写了多少行代码 $ git diff --shortstat &quot;@{0 day ago}&quot; # 显示某次提交的元数据和内容变化 $ git show [commit] # 显示某次提交发生变化的文件 $ git show --name-only [commit] # 显示某次提交时，某个文件的内容 $ git show [commit]:[filename] # 显示当前分支的最近几次提交 $ git reflog 撤销# 恢复暂存区的指定文件到工作区 $ git checkout [file] # 恢复某个commit的指定文件到暂存区和工作区 $ git checkout [commit] [file] # 恢复暂存区的所有文件到工作区 $ git checkout . # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 $ git reset [file] # 重置暂存区与工作区，与上一次commit保持一致 $ git reset --hard # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 $ git reset [commit] # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 $ git reset --hard [commit] # 重置当前HEAD为指定commit，但保持暂存区和工作区不变 $ git reset --keep [commit] # 新建一个commit，用来撤销指定commit # 后者的所有变化都将被前者抵消，并且应用到当前分支 $ git revert [commit] # 暂时将未提交的变化移除，稍后再移入 $ git stash $ git stash pop 其他# 生成一个可供发布的压缩包 $ git archives]]></content>
      <categories>
        <category>资料</category>
        <category>知识</category>
      </categories>
      <tags>
        <tag>资料</tag>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
